"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `BigInt` scalar type represents non-fractional signed whole numeric values."""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input LongFilterInput {
  and: [Long]
  or: [Long]
  not: LongFilterInput
  eq: Long
  eqi: Long
  ne: Long
  startsWith: Long
  endsWith: Long
  contains: Long
  notContains: Long
  containsi: Long
  notContainsi: Long
  gt: Long
  gte: Long
  lt: Long
  lte: Long
  null: Boolean
  notNull: Boolean
  in: [Long]
  notIn: [Long]
  between: [Long]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateFilterInput {
  and: [Date]
  or: [Date]
  not: DateFilterInput
  eq: Date
  eqi: Date
  ne: Date
  startsWith: Date
  endsWith: Date
  contains: Date
  notContains: Date
  containsi: Date
  notContainsi: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  null: Boolean
  notNull: Boolean
  in: [Date]
  notIn: [Date]
  between: [Date]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input AlbumFiltersInput {
  id: IDFilterInput
  figures: FigureFiltersInput
  user: UsersPermissionsUserFiltersInput
  nation: NationFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [AlbumFiltersInput]
  or: [AlbumFiltersInput]
  not: AlbumFiltersInput
}

input AlbumInput {
  figures: [ID]
  user: ID
  nation: ID
}

type Album {
  figures(filters: FigureFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): FigureRelationResponseCollection
  user: UsersPermissionsUserEntityResponse
  nation: NationEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type AlbumEntity {
  id: ID
  attributes: Album
}

type AlbumEntityResponse {
  data: AlbumEntity
}

type AlbumEntityResponseCollection {
  data: [AlbumEntity!]!
  meta: ResponseCollectionMeta!
}

input FigureFiltersInput {
  id: IDFilterInput
  player: PlayerFiltersInput
  cpf: LongFilterInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [FigureFiltersInput]
  or: [FigureFiltersInput]
  not: FigureFiltersInput
}

input FigureInput {
  player: ID
  cpf: Long
  users: [ID]
  publishedAt: DateTime
}

type Figure {
  player: PlayerEntityResponse
  cpf: Long!
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type FigureEntity {
  id: ID
  attributes: Figure
}

type FigureEntityResponse {
  data: FigureEntity
}

type FigureEntityResponseCollection {
  data: [FigureEntity!]!
  meta: ResponseCollectionMeta!
}

type FigureRelationResponseCollection {
  data: [FigureEntity!]!
}

input GroupFiltersInput {
  id: IDFilterInput
  nations: NationFiltersInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [GroupFiltersInput]
  or: [GroupFiltersInput]
  not: GroupFiltersInput
}

input GroupInput {
  nations: [ID]
  name: String
  publishedAt: DateTime
}

type Group {
  nations(filters: NationFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): NationRelationResponseCollection
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type GroupEntity {
  id: ID
  attributes: Group
}

type GroupEntityResponse {
  data: GroupEntity
}

type GroupEntityResponseCollection {
  data: [GroupEntity!]!
  meta: ResponseCollectionMeta!
}

input NationFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  continent: StringFilterInput
  players: PlayerFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [NationFiltersInput]
  or: [NationFiltersInput]
  not: NationFiltersInput
}

input NationInput {
  name: String
  slug: String
  flag: [ID]
  continent: String
  players: [ID]
  publishedAt: DateTime
}

type Nation {
  name: String!
  slug: String!
  flag(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  continent: String!
  players(filters: PlayerFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): PlayerRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type NationEntity {
  id: ID
  attributes: Nation
}

type NationEntityResponse {
  data: NationEntity
}

type NationEntityResponseCollection {
  data: [NationEntity!]!
  meta: ResponseCollectionMeta!
}

type NationRelationResponseCollection {
  data: [NationEntity!]!
}

input PlayerFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  birth_date: DateFilterInput
  heigth: StringFilterInput
  weight: StringFilterInput
  nation: NationFiltersInput
  position: PositionFiltersInput
  cpf: LongFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PlayerFiltersInput]
  or: [PlayerFiltersInput]
  not: PlayerFiltersInput
}

input PlayerInput {
  name: String
  photo: [ID]
  birth_date: Date
  heigth: String
  weight: String
  nation: ID
  position: ID
  cpf: Long
  publishedAt: DateTime
}

type Player {
  name: String!
  photo(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  birth_date: Date!
  heigth: String!
  weight: String!
  nation: NationEntityResponse
  position: PositionEntityResponse
  cpf: Long!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PlayerEntity {
  id: ID
  attributes: Player
}

type PlayerEntityResponse {
  data: PlayerEntity
}

type PlayerEntityResponseCollection {
  data: [PlayerEntity!]!
  meta: ResponseCollectionMeta!
}

type PlayerRelationResponseCollection {
  data: [PlayerEntity!]!
}

input PositionFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PositionFiltersInput]
  or: [PositionFiltersInput]
  not: PositionFiltersInput
}

input PositionInput {
  name: String
  publishedAt: DateTime
}

type Position {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PositionEntity {
  id: ID
  attributes: Position
}

type PositionEntityResponse {
  data: PositionEntity
}

type PositionEntityResponseCollection {
  data: [PositionEntity!]!
  meta: ResponseCollectionMeta!
}

input StadiumFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [StadiumFiltersInput]
  or: [StadiumFiltersInput]
  not: StadiumFiltersInput
}

input StadiumInput {
  name: String
  publishedAt: DateTime
}

type Stadium {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type StadiumEntity {
  id: ID
  attributes: Stadium
}

type StadiumEntityResponse {
  data: StadiumEntity
}

type StadiumEntityResponseCollection {
  data: [StadiumEntity!]!
  meta: ResponseCollectionMeta!
}

union GenericMorph = UploadFile | UploadFolder | I18NLocale | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Album | Figure | Group | Nation | Player | Position | Stadium

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  album(id: ID): AlbumEntityResponse
  albums(filters: AlbumFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): AlbumEntityResponseCollection
  figure(id: ID): FigureEntityResponse
  figures(filters: FigureFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): FigureEntityResponseCollection
  group(id: ID): GroupEntityResponse
  groups(filters: GroupFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): GroupEntityResponseCollection
  nation(id: ID): NationEntityResponse
  nations(filters: NationFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): NationEntityResponseCollection
  player(id: ID): PlayerEntityResponse
  players(filters: PlayerFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): PlayerEntityResponseCollection
  position(id: ID): PositionEntityResponse
  positions(filters: PositionFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): PositionEntityResponseCollection
  stadium(id: ID): StadiumEntityResponse
  stadiums(filters: StadiumFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): StadiumEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(id: ID!, data: UploadFolderInput!): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createAlbum(data: AlbumInput!): AlbumEntityResponse
  updateAlbum(id: ID!, data: AlbumInput!): AlbumEntityResponse
  deleteAlbum(id: ID!): AlbumEntityResponse
  createFigure(data: FigureInput!): FigureEntityResponse
  updateFigure(id: ID!, data: FigureInput!): FigureEntityResponse
  deleteFigure(id: ID!): FigureEntityResponse
  createGroup(data: GroupInput!): GroupEntityResponse
  updateGroup(id: ID!, data: GroupInput!): GroupEntityResponse
  deleteGroup(id: ID!): GroupEntityResponse
  createNation(data: NationInput!): NationEntityResponse
  updateNation(id: ID!, data: NationInput!): NationEntityResponse
  deleteNation(id: ID!): NationEntityResponse
  createPlayer(data: PlayerInput!): PlayerEntityResponse
  updatePlayer(id: ID!, data: PlayerInput!): PlayerEntityResponse
  deletePlayer(id: ID!): PlayerEntityResponse
  createPosition(data: PositionInput!): PositionEntityResponse
  updatePosition(id: ID!, data: PositionInput!): PositionEntityResponse
  deletePosition(id: ID!): PositionEntityResponse
  createStadium(data: StadiumInput!): StadiumEntityResponse
  updateStadium(id: ID!, data: StadiumInput!): StadiumEntityResponse
  deleteStadium(id: ID!): StadiumEntityResponse
  upload(refId: ID, ref: String, field: String, info: FileInfoInput, file: Upload!): UploadFileEntityResponse!
  multipleUpload(refId: ID, ref: String, field: String, files: [Upload]!): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse
  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  """Update an existing role"""
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload
  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  """Update an existing user"""
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  """Reset user password. Confirm with a code (resetToken from forgotPassword)"""
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
